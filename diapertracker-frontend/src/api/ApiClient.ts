//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    me( cancelToken?: CancelToken | undefined): Promise<UserProfile> {
        let url_ = this.baseUrl + "/api/identity/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMe(_response);
        });
    }

    protected processMe(response: AxiosResponse): Promise<UserProfile> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserProfile.fromJS(resultData200);
            return Promise.resolve<UserProfile>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserProfile>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    externalLogin(provider: string, body: ExternalLoginRequest | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/identity/{provider}/signin";
        if (provider === undefined || provider === null)
            throw new Error("The parameter 'provider' must be defined.");
        url_ = url_.replace("{provider}", encodeURIComponent("" + provider));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processExternalLogin(_response);
        });
    }

    protected processExternalLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    signout( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/identity/signout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignout(_response);
        });
    }

    protected processSignout(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getInvite(id: string, cancelToken?: CancelToken | undefined): Promise<ProjectMemberInviteDto> {
        let url_ = this.baseUrl + "/api/invites/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetInvite(_response);
        });
    }

    protected processGetInvite(response: AxiosResponse): Promise<ProjectMemberInviteDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProjectMemberInviteDto.fromJS(resultData200);
            return Promise.resolve<ProjectMemberInviteDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectMemberInviteDto>(null as any);
    }

    /**
     * @return Success
     */
    acceptInvite(id: string, cancelToken?: CancelToken | undefined): Promise<ProjectMemberInviteDto> {
        let url_ = this.baseUrl + "/api/invites/{id}/accept";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAcceptInvite(_response);
        });
    }

    protected processAcceptInvite(response: AxiosResponse): Promise<ProjectMemberInviteDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProjectMemberInviteDto.fromJS(resultData200);
            return Promise.resolve<ProjectMemberInviteDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectMemberInviteDto>(null as any);
    }

    /**
     * @return Success
     */
    declineInvite(id: string, cancelToken?: CancelToken | undefined): Promise<ProjectMemberInviteDto> {
        let url_ = this.baseUrl + "/api/invites/{id}/decline";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeclineInvite(_response);
        });
    }

    protected processDeclineInvite(response: AxiosResponse): Promise<ProjectMemberInviteDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProjectMemberInviteDto.fromJS(resultData200);
            return Promise.resolve<ProjectMemberInviteDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectMemberInviteDto>(null as any);
    }

    /**
     * Gets the projects of the current user
     * @return Success
     */
    getMyProjects( cancelToken?: CancelToken | undefined): Promise<ProjectDto[]> {
        let url_ = this.baseUrl + "/api/projects";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMyProjects(_response);
        });
    }

    protected processGetMyProjects(response: AxiosResponse): Promise<ProjectDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ProjectDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectDto[]>(null as any);
    }

    /**
     * Create a project with the given name and the logged in user as the administrator
     * @param body (optional) The project to be created
     * @return Success
     */
    createProject(body: CreateProjectDto | undefined, cancelToken?: CancelToken | undefined): Promise<ProjectDto> {
        let url_ = this.baseUrl + "/api/projects";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateProject(_response);
        });
    }

    protected processCreateProject(response: AxiosResponse): Promise<ProjectDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProjectDto.fromJS(resultData200);
            return Promise.resolve<ProjectDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectDto>(null as any);
    }

    /**
     * Gets the project with the specified id
     * @return Success
     */
    getProject(id: string, cancelToken?: CancelToken | undefined): Promise<ProjectDto> {
        let url_ = this.baseUrl + "/api/projects/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetProject(_response);
        });
    }

    protected processGetProject(response: AxiosResponse): Promise<ProjectDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProjectDto.fromJS(resultData200);
            return Promise.resolve<ProjectDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectDto>(null as any);
    }

    /**
     * Deletes the project with the given id
     * @param id Id of the project
     * @return Success
     */
    deleteProject(id: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/projects/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteProject(_response);
        });
    }

    protected processDeleteProject(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getMembers(id: string, cancelToken?: CancelToken | undefined): Promise<ProjectMemberDto[]> {
        let url_ = this.baseUrl + "/api/projects/{id}/members";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMembers(_response);
        });
    }

    protected processGetMembers(response: AxiosResponse): Promise<ProjectMemberDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectMemberDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ProjectMemberDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectMemberDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    inviteProjectMember(id: string, body: CreateProjectMemberInviteDto | undefined, cancelToken?: CancelToken | undefined): Promise<ProjectMemberInviteDto> {
        let url_ = this.baseUrl + "/api/projects/{id}/invite-member";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInviteProjectMember(_response);
        });
    }

    protected processInviteProjectMember(response: AxiosResponse): Promise<ProjectMemberInviteDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProjectMemberInviteDto.fromJS(resultData200);
            return Promise.resolve<ProjectMemberInviteDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProjectMemberInviteDto>(null as any);
    }

    /**
     * @param project (optional) 
     * @param type (optional) 
     * @param count (optional) 
     * @return Success
     */
    getTasks(project: string | undefined, type: string | undefined, count: number | undefined, cancelToken?: CancelToken | undefined): Promise<TaskRecordDto[]> {
        let url_ = this.baseUrl + "/api/tasks?";
        if (project === null)
            throw new Error("The parameter 'project' cannot be null.");
        else if (project !== undefined)
            url_ += "project=" + encodeURIComponent("" + project) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTasks(_response);
        });
    }

    protected processGetTasks(response: AxiosResponse): Promise<TaskRecordDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TaskRecordDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<TaskRecordDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TaskRecordDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createTask(body: CreateTaskDto | undefined, cancelToken?: CancelToken | undefined): Promise<TaskRecordDto> {
        let url_ = this.baseUrl + "/api/tasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateTask(_response);
        });
    }

    protected processCreateTask(response: AxiosResponse): Promise<TaskRecordDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TaskRecordDto.fromJS(resultData200);
            return Promise.resolve<TaskRecordDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TaskRecordDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateTask(id: string, body: UpdateTaskDto | undefined, cancelToken?: CancelToken | undefined): Promise<TaskRecordDto> {
        let url_ = this.baseUrl + "/api/tasks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateTask(_response);
        });
    }

    protected processUpdateTask(response: AxiosResponse): Promise<TaskRecordDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TaskRecordDto.fromJS(resultData200);
            return Promise.resolve<TaskRecordDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TaskRecordDto>(null as any);
    }

    /**
     * @return Success
     */
    deleteTask(id: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/tasks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteTask(_response);
        });
    }

    protected processDeleteTask(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createTaskType(body: CreateTaskType | undefined, cancelToken?: CancelToken | undefined): Promise<TaskTypeDto> {
        let url_ = this.baseUrl + "/api/task-types";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateTaskType(_response);
        });
    }

    protected processCreateTaskType(response: AxiosResponse): Promise<TaskTypeDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TaskTypeDto.fromJS(resultData200);
            return Promise.resolve<TaskTypeDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TaskTypeDto>(null as any);
    }

    /**
     * @param count (optional) 
     * @return Success
     */
    getTasksOfType(id: string, count: number | undefined, cancelToken?: CancelToken | undefined): Promise<TaskRecordDto[]> {
        let url_ = this.baseUrl + "/api/task-types/{id}/tasks?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTasksOfType(_response);
        });
    }

    protected processGetTasksOfType(response: AxiosResponse): Promise<TaskRecordDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TaskRecordDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<TaskRecordDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TaskRecordDto[]>(null as any);
    }
}

export class CreateProjectDto implements ICreateProjectDto {
    name!: string;

    constructor(data?: ICreateProjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateProjectDto {
    name: string;
}

export class CreateProjectMemberInviteDto implements ICreateProjectMemberInviteDto {
    email!: string;

    constructor(data?: ICreateProjectMemberInviteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CreateProjectMemberInviteDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProjectMemberInviteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface ICreateProjectMemberInviteDto {
    email: string;
}

/** DTO to be used when creating a new task */
export class CreateTaskDto implements ICreateTaskDto {
    /** Task type ID */
    typeId!: string;
    projectId!: string;

    constructor(data?: ICreateTaskDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeId = _data["typeId"];
            this.projectId = _data["projectId"];
        }
    }

    static fromJS(data: any): CreateTaskDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTaskDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeId"] = this.typeId;
        data["projectId"] = this.projectId;
        return data;
    }
}

/** DTO to be used when creating a new task */
export interface ICreateTaskDto {
    /** Task type ID */
    typeId: string;
    projectId: string;
}

export class CreateTaskType implements ICreateTaskType {
    displayName!: string;
    icon!: string;
    projectId!: string;

    constructor(data?: ICreateTaskType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.projectId = _data["projectId"];
        }
    }

    static fromJS(data: any): CreateTaskType {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTaskType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["projectId"] = this.projectId;
        return data;
    }
}

export interface ICreateTaskType {
    displayName: string;
    icon: string;
    projectId: string;
}

export class ExternalLoginRequest implements IExternalLoginRequest {
    token?: string;

    constructor(data?: IExternalLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ExternalLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IExternalLoginRequest {
    token?: string;
}

export class ProjectDto implements IProjectDto {
    id!: string;
    name!: string;
    taskTypes!: TaskTypeDto[];

    constructor(data?: IProjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.taskTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["taskTypes"])) {
                this.taskTypes = [] as any;
                for (let item of _data["taskTypes"])
                    this.taskTypes!.push(TaskTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.taskTypes)) {
            data["taskTypes"] = [];
            for (let item of this.taskTypes)
                data["taskTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProjectDto {
    id: string;
    name: string;
    taskTypes: TaskTypeDto[];
}

export class ProjectMemberDto implements IProjectMemberDto {
    id?: string;
    projectId?: string;
    userId?: string;
    user?: UserDto;
    isAdmin?: boolean;

    constructor(data?: IProjectMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
            this.isAdmin = _data["isAdmin"];
        }
    }

    static fromJS(data: any): ProjectMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["isAdmin"] = this.isAdmin;
        return data;
    }
}

export interface IProjectMemberDto {
    id?: string;
    projectId?: string;
    userId?: string;
    user?: UserDto;
    isAdmin?: boolean;
}

export class ProjectMemberInviteDto implements IProjectMemberInviteDto {
    id!: string;
    project!: ProjectDto;
    createdBy!: UserDto;
    createdOn!: Date;
    email!: string;
    isAccepted!: boolean;
    token?: string;

    constructor(data?: IProjectMemberInviteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.project = new ProjectDto();
            this.createdBy = new UserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.project = _data["project"] ? ProjectDto.fromJS(_data["project"]) : new ProjectDto();
            this.createdBy = _data["createdBy"] ? UserDto.fromJS(_data["createdBy"]) : new UserDto();
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.isAccepted = _data["isAccepted"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ProjectMemberInviteDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectMemberInviteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["project"] = this.project ? this.project.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["isAccepted"] = this.isAccepted;
        data["token"] = this.token;
        return data;
    }
}

export interface IProjectMemberInviteDto {
    id: string;
    project: ProjectDto;
    createdBy: UserDto;
    createdOn: Date;
    email: string;
    isAccepted: boolean;
    token?: string;
}

/** A representation of a persisted task including type details */
export class TaskRecordDto implements ITaskRecordDto {
    /** The id of the task */
    id!: string;
    type!: TaskTypeDto;
    createdBy!: UserDto;
    date!: Date;

    constructor(data?: ITaskRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.type = new TaskTypeDto();
            this.createdBy = new UserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"] ? TaskTypeDto.fromJS(_data["type"]) : new TaskTypeDto();
            this.createdBy = _data["createdBy"] ? UserDto.fromJS(_data["createdBy"]) : new UserDto();
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TaskRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaskRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

/** A representation of a persisted task including type details */
export interface ITaskRecordDto {
    /** The id of the task */
    id: string;
    type: TaskTypeDto;
    createdBy: UserDto;
    date: Date;
}

export class TaskTypeDto implements ITaskTypeDto {
    id!: string;
    displayName!: string;
    icon!: string;
    projectId!: string;

    constructor(data?: ITaskTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.projectId = _data["projectId"];
        }
    }

    static fromJS(data: any): TaskTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaskTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["projectId"] = this.projectId;
        return data;
    }
}

export interface ITaskTypeDto {
    id: string;
    displayName: string;
    icon: string;
    projectId: string;
}

export class UpdateTaskDto implements IUpdateTaskDto {
    date!: Date;

    constructor(data?: IUpdateTaskDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTaskDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTaskDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateTaskDto {
    date: Date;
}

export class UserDto implements IUserDto {
    id!: string;
    fullName!: string;
    firstName?: string;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.firstName = _data["firstName"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["firstName"] = this.firstName;
        return data;
    }
}

export interface IUserDto {
    id: string;
    fullName: string;
    firstName?: string;
}

export class UserProfile implements IUserProfile {
    isLoggedIn?: boolean;
    id?: string;
    firstName?: string;
    fullName?: string;
    email?: string;
    imageUrl?: string;
    /** Identity Provider. e.g. facebook or google */
    idp?: string;

    constructor(data?: IUserProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isLoggedIn = _data["isLoggedIn"];
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.imageUrl = _data["imageUrl"];
            this.idp = _data["idp"];
        }
    }

    static fromJS(data: any): UserProfile {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLoggedIn"] = this.isLoggedIn;
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["imageUrl"] = this.imageUrl;
        data["idp"] = this.idp;
        return data;
    }
}

export interface IUserProfile {
    isLoggedIn?: boolean;
    id?: string;
    firstName?: string;
    fullName?: string;
    email?: string;
    imageUrl?: string;
    /** Identity Provider. e.g. facebook or google */
    idp?: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}